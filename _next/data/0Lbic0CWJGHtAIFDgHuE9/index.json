{"pageProps":{"data":[{"id":"2021-03-06","content":"最近気になっていた言語が二つある。\n\n一つは[[TypeScript]]、もう一つが[[Rust]]だ。\n\n[[C++]]が一番長い期間触っていて好きな言語なんだけど、C++17あたりからの進化の方向性に違和感があってなんだかなあと思っている。逆に[[C言語]]に戻ってみるか？と思ったりもしたんだけど、そんな折に、どうも[[Rust]]が良さそうという噂を聞いた。\n\nまずは公式のドキュメントから読んでいく。\n\n[The Rust Programming Language 日本語版 - The Rust Programming Language 日本語版](https://doc.rust-jp.rs/book-ja/title-page.html)\n\n言語やフレームワーク、ライブラリなんでもなんだけど、ドキュメントがしっかりしていると安心感がある。\n\n---\n\nとりあえず[[VS Code Remote Development]]で[[Rust]]の開発環境を整える。\n"},{"id":"2021-03-05","content":"Wikiシステムの改良をしている。\n\n- 参照元リンクが自動的に表示されるようにしたい。\n- 関係ありそうなリンクも自動的に表示されるとうれしい。\n\nざっくり言うと[Scrapbox](https://scrapbox.io)みたいにしたい。\n\n[[SSG]]でやりたいので、[[Markdown]]で書かれたファイル群からリンク情報を生成しておくことにした。\n\n```json\n[\n    {\n        id: \"ページ名\",\n        refLinks: [\"このページを参照しているページ名\", ...],\n        links: [\"このページから参照しているページ名\", ...]\n    },\n    ...\n]\n```\n\nこんな感じの[[JSON]]を一旦作っておいて、[[Next.js]]でのビルド時にこのファイルも参照しながらページを構築していく。\n\nWikiリンクは`[[`と`]]`で囲うと作られるんだけど、存在しないリンクもつくることができる。存在しているかどうかを考えながら囲うか囲うまいか迷うのが嫌なので、ページが存在していなかった場合は自動的に作られるようにした。\n\nあいかわらず、スクリプトは[[JavaScript]]で書いた。\n"},{"id":"2021-03-04","content":"[[RSS]]をつけてみたい。\n\n[[Next.js]]で[[RSS]]生成ができるのか調べていた。見つけた方法は2つ。\n\n1. `getServerSideProps()`を使って[[SSR]]する。\n2. ビルド時に別処理で[[RSS]]ファイルを生成する。\n\n1.の方はサーバの用意が大変そうなのでやりたくない。2.になるんだけど、すでに[[Next.js]]で同じような処理をやっているので、なんとかまとめたいと思っているんだけど、思いつかない。\n\n[[RSS]]生成は`yarn export:rss`ってやると`./out/rss.xml`が出力される感じにしたい。できれば[[TypeScript]]で書きたいんだけど、コンパイルとかもろもろ面倒なので素の[[JavaScript]]で書くことにしてみる。それなら`node gen-rss.js`で済む。\n\n```package.json\n\"scripts\": {\n  ...\n  \"export:rss\": \"node gen-rss.js\",\n  ...\n},\n```\n\nあとは[[Next.js]]でもやったような、[[Markdown]]ファイル群を[[HTML]]に変換して[[RSS]]ファイルを生成する――同じような処理を何度も書くの嫌だなあ。\n\nhttps://github.com/te9yie/te9yie.github.io/blob/main/gen-rss.js\n\n[ReactDOMServer](https://ja.reactjs.org/docs/react-dom-server.html)使ってComponentsを使い回せないかと思ったんだが、コンパイル後`.js`が散らばったり`tsconfig.json`をどこに置けば良いのか分からないやらで、今の自分の知識では厳しそうだった。\n\nあとは[[GitHub Actions]]のワークフローに組み込んで完成。うまく動いているといいなあ。\n"}]},"__N_SSG":true}