<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>te9yie</title>
        <link>https://te9yie.github.io</link>
        <description>te9yie.github.io</description>
        <lastBuildDate>Mon, 08 Mar 2021 01:57:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[2021-03-08]]></title>
            <link>https://te9yie.github.io/b/2021-03-08</link>
            <guid>https://te9yie.github.io/b/2021-03-08</guid>
            <description><![CDATA[2021-03-08]]></description>
            <content:encoded><![CDATA[<p><a class="internal new" href="/w/Rust">Rust</a>で<a class="internal new" href="/w/WebAssembly">WebAssembly</a>を生成しようにも、<a class="internal new" href="/w/webpack">webpack</a>の挙動が理解できてなくて意味が分からない。一旦<a class="internal new" href="/w/webpack">webpack</a>使わずに、<a class="internal new" href="/w/Rust">Rust</a>から<code>wasm</code>を生成し、それを<a class="internal new" href="/w/HTML">HTML</a>から読み込むだけのところから始めてみる。</p>
<p><a class="internal new" href="/w/Rust">Rust</a>のクレートとして<code>wasm-bindgen</code>を使う。これは、<a class="internal new" href="/w/Rust">Rust</a>と<a class="internal new" href="/w/JavaScript">JavaScript</a>の橋渡しをしてくれる。あと<code>web-sys</code>。これを使うと<a class="internal new" href="/w/Rust">Rust</a>から<a class="internal new" href="/w/DOM">DOM</a>を操作できるようになる。</p>
<p><code>lib.rs</code>:</p>
<pre><code class="language-rust">use wasm_bindgen::prelude::*;
use wasm_bindgen::JsCast;

#[wasm_bindgen(start)]
pub fn main() {
    let window = web_sys::window().unwrap();
    let document = window.document().unwrap();
    let canvas = document.get_element_by_id("canvas").unwrap();
    let canvas = canvas.dyn_into::&#x3C;web_sys::HtmlCanvasElement>().unwrap();
    let context = canvas.get_context("2d").unwrap();
    let context = context
        .unwrap()
        .dyn_into::&#x3C;web_sys::CanvasRenderingContext2d>()
        .unwrap();

    context.set_font("100% sans-serif");
    context.fill_text("Hello WASM!", 10.0, 20.0).unwrap();

    context.set_fill_style(&#x26;"red".into());
    context.fill_rect(20.0, 30.0, 40.0, 40.0);

    context.set_fill_style(&#x26;"green".into());
    context.fill_rect(40.0, 50.0, 40.0, 40.0);
}
</code></pre>
<p><code>Cargo.toml</code>:</p>
<pre><code class="language-toml">[package]
name = "hello-wasm-canvas"
version = "0.1.0"
authors = ["te9yie &#x3C;te9yie@users.noreply.github.com>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
crate-type = ["cdylib"]

[dependencies]
wasm-bindgen = "*"

[dependencies.web-sys]
version = "*"
features = [
    "CanvasRenderingContext2d",
    "Document",
    "Element",
    "HtmlCanvasElement",
    "Window",
]
</code></pre>
<p>ビルドしてみる。</p>
<pre><code class="language-bash">$ wasm-pack build --target web
</code></pre>
<p><code>pkg</code>ディレクトリが生成される。</p>
<pre><code class="language-bash">pkg
├── hello_wasm_canvas.d.ts
├── hello_wasm_canvas.js
├── hello_wasm_canvas_bg.wasm
├── hello_wasm_canvas_bg.wasm.d.ts
└── package.json
</code></pre>
<p><a class="internal new" href="/w/TypeScript">TypeScript</a>用の型情報も生成されるんだな。</p>
<p>これを読み込む<a class="internal new" href="/w/HTML">HTML</a>を書いてみる。</p>
<p><code>index.html</code>:</p>
<pre><code class="language-html">&#x3C;html>
    &#x3C;body>
        &#x3C;script type="module">
            import init from "./pkg/hello_wasm_canvas.js";
            const run = async () => {
                await init();
            }
            run();
        &#x3C;/script>
        &#x3C;canvas id="canvas" />
    &#x3C;/body>
&#x3C;/html>
</code></pre>
<p>適当にサーバを立てて確認してみる。</p>
<pre><code class="language-bash">$ npx serve
</code></pre>
<p>動いた！</p>
<p><a class="internal new" href="/w/webpack">webpack</a>でこんな感じの<a class="internal new" href="/w/HTML">HTML</a>を生成したりしてたんだな。それだけなのになんでバージョン4と5であんなに挙動が変わるんだろう。<a class="internal new" href="/w/webpack">webpack</a>の<code>html-webpack-plugin</code>と<code>wasm-pack-plugin</code>あたりを調べてみようか。どうせならバージョン5の方で動かしてみたい。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2021-03-07]]></title>
            <link>https://te9yie.github.io/b/2021-03-07</link>
            <guid>https://te9yie.github.io/b/2021-03-07</guid>
            <description><![CDATA[2021-03-07]]></description>
            <content:encoded><![CDATA[<p><a class="internal new" href="/w/Rust">Rust</a>から<a class="internal new" href="/w/WebAssembly">WebAssembly</a>を作ってみる。</p>
<p><a href="https://rustwasm.github.io/docs/wasm-bindgen/examples/hello-world.html">Hello, World! - The <code>wasm-bindgen</code> Guide</a>を参考にやってみたんだけど、色々上手く動かなかった。</p>
<pre><code class="language-bash">$ cargo new hello-wasm --lib
$ cd hello-wasm
$ yarn init -y
$ yarn add -D @wasm-tool/wasm-pack-plugin text-encoding html-webpack-plugin webpack webpack-cli webpack-dev-server
$ code . # サンプルのコードを参考に色々書く
$ yarn build
</code></pre>
<p>ここでエラー</p>
<pre><code class="language-bash">yarn run v1.22.10
$ webpack
🧐  Checking for wasm-pack...

ℹ️  Installing wasm-pack 

[webpack-cli] Error: Rust compilation.
    at ChildProcess.p.on.code (/home/i/w/hello-wasm/node_modules/@wasm-tool/wasm-pack-plugin/plugin.js:221:16)
    at ChildProcess.emit (events.js:198:13)
    at maybeClose (internal/child_process.js:982:16)
    at Socket.stream.socket.on (internal/child_process.js:389:11)
    at Socket.emit (events.js:198:13)
    at Pipe._handle.close (net.js:607:12)
error Command failed with exit code 2.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
</code></pre>
<p><code>cargo build</code>は問題なくて<code>$(npm bin)/webpack</code>したらエラーになる。
<code>wasm-pack-plugin</code>ってのでコケてそうだったので、<a href="https://github.com/wasm-tool/wasm-pack-plugin">wasm-tool/wasm-pack-plugin: webpack plugin for Rust</a>を見に行ったら、<code>wasm-pack</code>を入れろって書いてあった。よく見るとメッセージにも<code>Installing wasm-pack</code>って出てた。</p>
<pre><code class="language-bash">$ cargo install wasm-pack
$ yarn build
</code></pre>
<p>またエラー</p>
<pre><code class="language-bash">yarn run v1.22.10
$ webpack
🧐  Checking for wasm-pack...

✅  wasm-pack is installed at /home/i/.cargo/bin/wasm-pack. 

ℹ️  Compiling your crate in development mode...

[INFO]: Checking for the Wasm target...
[INFO]: Compiling to Wasm...
   Compiling cfg-if v1.0.0
   Compiling wasm-bindgen v0.2.71
   Compiling hello-wasm v0.1.0 (/home/i/w/hello-wasm)
    Finished dev [unoptimized + debuginfo] target(s) in 0.83s
:-) [WARN]: origin crate has no README
[INFO]: Installing wasm-bindgen...
[INFO]: Optional fields missing from Cargo.toml: 'description', 'repository', and 'license'. These are not necessary, but recommended
[INFO]: :-) Done in 1.06s
[INFO]: :-) Your wasm pkg is ready to publish at /home/i/w/hello-wasm/pkg.
✅  Your crate has been correctly compiled

asset vendors-node_modules_text-encoding_index_js.index.js 623 KiB [emitted] (id hint: vendors)
asset index.js 13.3 KiB [emitted] (name: main)
asset pkg_index_js.index.js 7.28 KiB [emitted]
asset index.html 232 bytes [emitted]
runtime modules 7.32 KiB 11 modules
cacheable modules 692 KiB
  modules by path ./pkg/ 74.7 KiB
    ./pkg/index.js 71 bytes [built] [code generated]
    ./pkg/index_bg.js 3.25 KiB [built] [code generated]
    ./pkg/index_bg.wasm 71.4 KiB [built] [code generated] [1 error]
  modules by path ./node_modules/text-encoding/ 617 KiB
    ./node_modules/text-encoding/index.js 258 bytes [built] [code generated]
    ./node_modules/text-encoding/lib/encoding.js 99.1 KiB [built] [code generated]
    ./node_modules/text-encoding/lib/encoding-indexes.js 518 KiB [built] [code generated]
  ./index.js 88 bytes [built] [code generated]

ERROR in ./pkg/index_bg.wasm 1:0
Module parse failed: Unexpected character '' (1:0)
The module seem to be a WebAssembly module, but module is not flagged as WebAssembly module for webpack.
BREAKING CHANGE: Since webpack 5 WebAssembly is not enabled by default and flagged as experimental feature.
You need to enable one of the WebAssembly experiments via 'experiments.asyncWebAssembly: true' (based on async modules) or 'experiments.syncWebAssembly: true' (like webpack 4, deprecated).
For files that transpile to WebAssembly, make sure to set the module type in the 'module.rules' section of the config (e. g. 'type: "webassembly/async"').
(Source code omitted for this binary file)
 @ ./pkg/index.js 1:0-40
 @ ./index.js 1:13-28

webpack 5.24.3 compiled with 1 error in 1526 ms
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
</code></pre>
<p><code>experiments.asyncWebAssembly: true</code>にして<code>module.rules</code>を設定しろとのことなので<code>webpack.config.js</code>を修正した。</p>
<pre><code class="language-diff">+  experiments: {
+    asyncWebAssembly: true,
+  },
+  module: {
+    rules: [
+      {
+        test: /\.wasm/,
+        type: "webassembly/async",
+      },
+    ],
+  },
</code></pre>
<p><code>yarn build</code>が通ったので<code>yarn serve</code>してみる。エラー。</p>
<pre><code class="language-bash">$ yarn serve
yarn run v1.22.10
$ webpack-dev-server
internal/modules/cjs/loader.js:638
    throw err;
    ^

Error: Cannot find module 'webpack-cli/bin/config-yargs'
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:636:15)
    at Function.Module._load (internal/modules/cjs/loader.js:562:25)
    at Module.require (internal/modules/cjs/loader.js:692:17)
    at require (internal/modules/cjs/helpers.js:25:18)
    at Object.&#x3C;anonymous> (/home/i/w/hello-wasm/node_modules/webpack-dev-server/bin/webpack-dev-server.js:65:1)
    at Module._compile (internal/modules/cjs/loader.js:778:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
</code></pre>
<p><a href="https://iwb.jp/webpack-cli-dev-server-error-config-yargs/">webpackでWebサーバーでの確認にwebpack-dev-serverは不可 | iwb.jp</a>で、<code>webpack-cli serve</code>を使えとのことなので、修正してみる。</p>
<pre><code class="language-diff">-    "serve": "webpack-dev-server"
+    "serve": "webpack-cli serve --open --mode development"
</code></pre>
<p>エラーなく動いた。が、何も起きない。どうなってんだ？と思ってデベロッパーツールを見たらエラーが出てた。</p>
<pre><code>TypeError: Cannot read property '__wbindgen_malloc' of undefined
    at Module.greet (index_bg.js:115)
    at eval (index.js:4)
</code></pre>
<p>…無理。もう分かんない。
そもそもサンプル動くんかよ。と思って</p>
<p><a href="https://github.com/rustwasm/wasm-bindgen/tree/master/examples/hello_world">https://github.com/rustwasm/wasm-bindgen/tree/master/examples/hello_world</a></p>
<p>を試したら動いた。
何が違うんだと思ってよく見比べると<code>package.json</code>が違った。</p>
<pre><code class="language-diff">-    "html-webpack-plugin": "^5.2.0",
-    "webpack": "^5.24.3",
-    "webpack-cli": "^4.5.0",
-    "webpack-dev-server": "^3.11.2"
+    "html-webpack-plugin": "^3.2.0",
+    "webpack": "^4.29.4",
+    "webpack-cli": "^3.1.1",
+    "webpack-dev-server": "^3.1.0"
</code></pre>
<p>さっきからエラーの内容も大体<a class="internal new" href="/w/webpack">webpack</a>のバージョンが4じゃなくて5だから出てる雰囲気を醸し出していた。なんでも最新じゃだめなんだねぇ。</p>
<p>とりあえず<a class="internal new" href="/w/webpack">webpack</a>あたりのバージョンを4にしてみる。</p>
<pre><code class="language-diff">-    "html-webpack-plugin": "^5.2.0",
-    "webpack": "^5.24.3",
+    "html-webpack-plugin": "^4.0.0",
+    "webpack": "^4.0.0",
</code></pre>
<p>動いた。</p>
<h3>まとめ</h3>
<p>パッケージのバージョン合わせるの大事！！！</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2021-03-06]]></title>
            <link>https://te9yie.github.io/b/2021-03-06</link>
            <guid>https://te9yie.github.io/b/2021-03-06</guid>
            <description><![CDATA[2021-03-06]]></description>
            <content:encoded><![CDATA[<p>最近気になっていた言語が二つある。</p>
<p>一つは<a class="internal new" href="/w/TypeScript">TypeScript</a>、もう一つが<a class="internal new" href="/w/Rust">Rust</a>だ。</p>
<p><a class="internal new" href="/w/C++">C++</a>が一番長い期間触っていて好きな言語なんだけど、C++17あたりからの進化の方向性に違和感があってなんだかなあと思っている。逆に<a class="internal new" href="/w/C言語">C言語</a>に戻ってみるか？と思ったりもしたんだけど、そんな折に、どうも<a class="internal new" href="/w/Rust">Rust</a>が良さそうという噂を聞いた。</p>
<p>まずは公式のドキュメントから読んでいく。</p>
<p><a href="https://doc.rust-jp.rs/book-ja/title-page.html">The Rust Programming Language 日本語版 - The Rust Programming Language 日本語版</a></p>
<p>言語やフレームワーク、ライブラリなんでもなんだけど、ドキュメントがしっかりしていると安心感がある。</p>
<hr>
<p>とりあえず<a class="internal new" href="/w/VS Code Remote Development">VS Code Remote Development</a>で<a class="internal new" href="/w/Rust">Rust</a>の開発環境を整える。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2021-03-05]]></title>
            <link>https://te9yie.github.io/b/2021-03-05</link>
            <guid>https://te9yie.github.io/b/2021-03-05</guid>
            <description><![CDATA[2021-03-05]]></description>
            <content:encoded><![CDATA[<p>Wikiシステムの改良をしている。</p>
<ul>
<li>参照元リンクが自動的に表示されるようにしたい。</li>
<li>関係ありそうなリンクも自動的に表示されるとうれしい。</li>
</ul>
<p>ざっくり言うと<a href="https://scrapbox.io">Scrapbox</a>みたいにしたい。</p>
<p><a class="internal new" href="/w/SSG">SSG</a>でやりたいので、<a class="internal new" href="/w/Markdown">Markdown</a>で書かれたファイル群からリンク情報を生成しておくことにした。</p>
<pre><code class="language-json">[
    {
        id: "ページ名",
        refLinks: ["このページを参照しているページ名", ...],
        links: ["このページから参照しているページ名", ...]
    },
    ...
]
</code></pre>
<p>こんな感じの<a class="internal new" href="/w/JSON">JSON</a>を一旦作っておいて、<a class="internal new" href="/w/Next.js">Next.js</a>でのビルド時にこのファイルも参照しながらページを構築していく。</p>
<p>Wikiリンクは<code>[[</code>と<code>]]</code>で囲うと作られるんだけど、存在しないリンクもつくることができる。存在しているかどうかを考えながら囲うか囲うまいか迷うのが嫌なので、ページが存在していなかった場合は自動的に作られるようにした。</p>
<p>あいかわらず、スクリプトは<a class="internal new" href="/w/JavaScript">JavaScript</a>で書いた。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2021-03-04]]></title>
            <link>https://te9yie.github.io/b/2021-03-04</link>
            <guid>https://te9yie.github.io/b/2021-03-04</guid>
            <description><![CDATA[2021-03-04]]></description>
            <content:encoded><![CDATA[<p><a class="internal new" href="/w/RSS">RSS</a>をつけてみたい。</p>
<p><a class="internal new" href="/w/Next.js">Next.js</a>で<a class="internal new" href="/w/RSS">RSS</a>生成ができるのか調べていた。見つけた方法は2つ。</p>
<ol>
<li><code>getServerSideProps()</code>を使って<a class="internal new" href="/w/SSR">SSR</a>する。</li>
<li>ビルド時に別処理で<a class="internal new" href="/w/RSS">RSS</a>ファイルを生成する。</li>
</ol>
<p>1.の方はサーバの用意が大変そうなのでやりたくない。2.になるんだけど、すでに<a class="internal new" href="/w/Next.js">Next.js</a>で同じような処理をやっているので、なんとかまとめたいと思っているんだけど、思いつかない。</p>
<p><a class="internal new" href="/w/RSS">RSS</a>生成は<code>yarn export:rss</code>ってやると<code>./out/rss.xml</code>が出力される感じにしたい。できれば<a class="internal new" href="/w/TypeScript">TypeScript</a>で書きたいんだけど、コンパイルとかもろもろ面倒なので素の<a class="internal new" href="/w/JavaScript">JavaScript</a>で書くことにしてみる。それなら<code>node gen-rss.js</code>で済む。</p>
<pre><code class="language-package.json">"scripts": {
  ...
  "export:rss": "node gen-rss.js",
  ...
},
</code></pre>
<p>あとは<a class="internal new" href="/w/Next.js">Next.js</a>でもやったような、<a class="internal new" href="/w/Markdown">Markdown</a>ファイル群を<a class="internal new" href="/w/HTML">HTML</a>に変換して<a class="internal new" href="/w/RSS">RSS</a>ファイルを生成する――同じような処理を何度も書くの嫌だなあ。</p>
<p><a href="https://github.com/te9yie/te9yie.github.io/blob/main/gen-rss.js">https://github.com/te9yie/te9yie.github.io/blob/main/gen-rss.js</a></p>
<p><a href="https://ja.reactjs.org/docs/react-dom-server.html">ReactDOMServer</a>使ってComponentsを使い回せないかと思ったんだが、コンパイル後<code>.js</code>が散らばったり<code>tsconfig.json</code>をどこに置けば良いのか分からないやらで、今の自分の知識では厳しそうだった。</p>
<p>あとは<a class="internal new" href="/w/GitHub Actions">GitHub Actions</a>のワークフローに組み込んで完成。うまく動いているといいなあ。</p>
]]></content:encoded>
        </item>
    </channel>
</rss>