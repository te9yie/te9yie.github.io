<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>te9yie</title>
        <link>https://te9yie.github.io</link>
        <description>te9yie.github.io</description>
        <lastBuildDate>Fri, 05 Mar 2021 14:27:47 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[2021-03-05]]></title>
            <link>https://te9yie.github.io/b/2021-03-05</link>
            <guid>https://te9yie.github.io/b/2021-03-05</guid>
            <description><![CDATA[2021-03-05]]></description>
            <content:encoded><![CDATA[<p>Wikiシステムの改良をしている。</p>
<ul>
<li>参照元リンクが自動的に表示されるようにしたい。</li>
<li>関係ありそうなリンクも自動的に表示されるとうれしい。</li>
</ul>
<p>ざっくり言うと<a href="https://scrapbox.io">Scrapbox</a>みたいにしたい。</p>
<p><a class="internal new" href="/w/SSG">SSG</a>でやりたいので、<a class="internal new" href="/w/Markdown">Markdown</a>で書かれたファイル群からリンク情報を生成しておくことにした。</p>
<pre><code class="language-json">[
    {
        id: "ページ名",
        refLinks: ["このページを参照しているページ名", ...],
        links: ["このページから参照しているページ名", ...]
    },
    ...
]
</code></pre>
<p>こんな感じの<a class="internal new" href="/w/JSON">JSON</a>を一旦作っておいて、<a class="internal new" href="/w/Next.js">Next.js</a>でのビルド時にこのファイルも参照しながらページを構築していく。</p>
<p>Wikiリンクは<code>[[</code>と<code>]]</code>で囲うと作られるんだけど、存在しないリンクもつくることができる。存在しているかどうかを考えながら囲うか囲うまいか迷うのが嫌なので、ページが存在していなかった場合は自動的に作られるようにした。</p>
<p>あいかわらず、スクリプトは<a class="internal new" href="/w/JavaScript">JavaScript</a>で書いた。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2021-03-04]]></title>
            <link>https://te9yie.github.io/b/2021-03-04</link>
            <guid>https://te9yie.github.io/b/2021-03-04</guid>
            <description><![CDATA[2021-03-04]]></description>
            <content:encoded><![CDATA[<p><a class="internal new" href="/w/RSS">RSS</a>をつけてみたい。</p>
<p><a class="internal new" href="/w/Next.js">Next.js</a>で<a class="internal new" href="/w/RSS">RSS</a>生成ができるのか調べていた。見つけた方法は2つ。</p>
<ol>
<li><code>getServerSideProps()</code>を使って<a class="internal new" href="/w/SSR">SSR</a>する。</li>
<li>ビルド時に別処理で<a class="internal new" href="/w/RSS">RSS</a>ファイルを生成する。</li>
</ol>
<p>1.の方はサーバの用意が大変そうなのでやりたくない。2.になるんだけど、すでに<a class="internal new" href="/w/Next.js">Next.js</a>で同じような処理をやっているので、なんとかまとめたいと思っているんだけど、思いつかない。</p>
<p><a class="internal new" href="/w/RSS">RSS</a>生成は<code>yarn export:rss</code>ってやると<code>./out/rss.xml</code>が出力される感じにしたい。できれば<a class="internal new" href="/w/TypeScript">TypeScript</a>で書きたいんだけど、コンパイルとかもろもろ面倒なので素の<a class="internal new" href="/w/JavaScript">JavaScript</a>で書くことにしてみる。それなら<code>node gen-rss.js</code>で済む。</p>
<pre><code class="language-package.json">"scripts": {
  ...
  "export:rss": "node gen-rss.js",
  ...
},
</code></pre>
<p>あとは<a class="internal new" href="/w/Next.js">Next.js</a>でもやったような、<a class="internal new" href="/w/Markdown">Markdown</a>ファイル群を<a class="internal new" href="/w/HTML">HTML</a>に変換して<a class="internal new" href="/w/RSS">RSS</a>ファイルを生成する――同じような処理を何度も書くの嫌だなあ。</p>
<p><a href="https://github.com/te9yie/te9yie.github.io/blob/main/gen-rss.js">https://github.com/te9yie/te9yie.github.io/blob/main/gen-rss.js</a></p>
<p><a href="https://ja.reactjs.org/docs/react-dom-server.html">ReactDOMServer</a>使ってComponentsを使い回せないかと思ったんだが、コンパイル後<code>.js</code>が散らばったり<code>tsconfig.json</code>をどこに置けば良いのか分からないやらで、今の自分の知識では厳しそうだった。</p>
<p>あとは<a class="internal new" href="/w/GitHub Actions">GitHub Actions</a>のワークフローに組み込んで完成。うまく動いているといいなあ。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2021-03-03]]></title>
            <link>https://te9yie.github.io/b/2021-03-03</link>
            <guid>https://te9yie.github.io/b/2021-03-03</guid>
            <description><![CDATA[2021-03-03]]></description>
            <content:encoded><![CDATA[<p>検索機能をつけたい。Google検索ができればよいと思い設定してみる。</p>
<p><a href="https://programmablesearchengine.google.com/">Programmable Search Engine</a></p>
<p>下記のコードをコピーして貼り付けてくれ、といわれたままやると<code>&#x3C;div></code>自体が見えなくなってうまく動かなかった。</p>
<pre><code class="language-html">&#x3C;script async src="https://cse.google.com/cse.js?cx=c961937a8b4f96e3d">&#x3C;/script>
&#x3C;div class="gcse-search">&#x3C;/div>
</code></pre>
<p>まあ<a class="internal new" href="/w/React">React</a>だから<code>&#x3C;script></code>あたりの処理がうまく動かないのかなと思った。</p>
<p><code>useEffect</code>で対応してみた。</p>
<pre><code class="language-typescript">const SearchBox: React.FC = () => {
  const searchBoxRef = React.createRef&#x3C;HTMLDivElement>();
  useEffect(() => {
    if (searchBoxRef &#x26;&#x26; searchBoxRef.current) {
      const searchBox = searchBoxRef.current;
      const parent = searchBox.parentNode;
      const gcse = document.createElement("script");
      gcse.async = true;
      gcse.src = "https://cse.google.com/cse.js?cx=c961937a8b4f96e3d";
      parent?.insertBefore(gcse, searchBox);
    }
  });
  return (
    &#x3C;div className="search-box">
      &#x3C;div ref={searchBoxRef} className="gcse-search">&#x3C;/div>
    &#x3C;/div>
  );
};
</code></pre>
<p>あと余白が大きくて邪魔だったので<a class="internal new" href="/w/CSS">CSS</a>も書いた。</p>
<pre><code class="language-css">.gsc-control-cse {
    padding: 0 !important;
}
</code></pre>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2021-03-02]]></title>
            <link>https://te9yie.github.io/b/2021-03-02</link>
            <guid>https://te9yie.github.io/b/2021-03-02</guid>
            <description><![CDATA[2021-03-02]]></description>
            <content:encoded><![CDATA[<p>引き続き<a class="internal new" href="/w/JavaScript">JavaScript</a>の勉強。</p>
<p><a href="https://jsprimer.net/basic/function-this/">関数とthis · JavaScript Primer #jsprimer</a>を読んだ。</p>
<p>アロー関数では<code>this</code>は静的スコープで解決され、それ以外の関数では暗黙の引数で<code>this</code>が渡されるようだ。<code>var</code>の変数の巻き上げ挙動も怖い。知らないと色々罠がありそうだ。</p>
<p><a class="internal new" href="/w/TypeScript">TypeScript</a>を学ぶにしても、基本のJavaScriptの知識がないとダメなことが分かった。</p>
<hr>
<p>開発環境として<a class="internal new" href="/w/Docker">Docker</a>を使ってみることにした。<a class="internal new" href="/w/VS Code">VS Code</a>から簡単に扱えるようなので試している。</p>
<p><a href="https://code.visualstudio.com/docs/remote/containers">Developing inside a Container using Visual Studio Code Remote Development</a></p>
<p>Windowsで<code>git clone</code>して<a class="internal new" href="/w/Remote Container">Remote Container</a>で開いたらファイルが軒並み変更がかかった。どうも改行コードらへんの扱いが怪しいらしい。と思ったら、そのものの解説があった。</p>
<p><a href="https://code.visualstudio.com/docs/remote/troubleshooting#_resolving-git-line-ending-issues-in-containers-resulting-in-many-modified-files">Visual Studio Code Remote Development Troubleshooting Tips and Tricks</a></p>
<p><code>.gitattributes</code>を追加することにした。</p>
<pre><code class="language-gitattributes">* text=auto eol=lf
</code></pre>
<hr>
<p>いや、<a class="internal new" href="/w/Windows">Windows</a>上で<code>git clone</code>せずに<a class="internal new" href="/w/WSL">WSL</a>上でやって、そこから<a class="internal new" href="/w/Remote Container">Remote Container</a>を使うと大丈夫だ。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2021-03-01]]></title>
            <link>https://te9yie.github.io/b/2021-03-01</link>
            <guid>https://te9yie.github.io/b/2021-03-01</guid>
            <description><![CDATA[2021-03-01]]></description>
            <content:encoded><![CDATA[<p><a class="internal new" href="/w/JavaScript">JavaScript</a>難しい。</p>
<p><a href="https://ja.reactjs.org/docs/handling-events.html">Reactのイベント処理</a>:</p>
<blockquote>
<p>JSX のコールバックにおける this の意味に注意しなければなりません。JavaScript では、クラスのメソッドはデフォルトではバインドされません。this.handleClick へのバインドを忘れて onClick に渡した場合、実際に関数が呼ばれた時に this は undefined となってしまいます。</p>
</blockquote>
<p>意味が分からない。<a class="internal new" href="/w/JavaScript">JavaScript</a>では関数の定義方法が複数あって、それぞれ挙動が違うってことなんだと思う。</p>
<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Functions/Arrow_functions">アロー関数 - JavaScript | MDN</a>によると、メソッドでない関数はアロー関数式を使って定義したほうがよさそうだ。</p>
<p><a class="internal new" href="/w/TypeScript">TypeScript</a>の場合も、<a href="https://typescript-jp.gitbook.io/deep-dive/future-javascript/arrow-functions">アロー関数 - TypeScript Deep Dive 日本語版</a>を読む感じ、基本的にはアロー関数を使ったほうがよさそうな気がする。</p>
<p><code>this</code>のバインドあたりの理解は大変そうだ。</p>
<hr>
<p>「ネスレ 香るまろやか ミルクココア」がおいしい。<code>>></code><a class="internal new" href="/w/好きなもの">好きなもの</a></p>
]]></content:encoded>
        </item>
    </channel>
</rss>